from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F

from app.states import AddTrackState
from app.backend import create_actions, success_payment

from app.keyboards.inline.menu_keyboard import start_keyboard
from app.keyboards.inline.plans_keyboard import plans_keyboard
from app.keyboards.callbacks.main_callback import MainCallback

add_tracking_router = Router()

@add_tracking_router.callback_query(MainCallback.filter(F.action == "add_track"))
async def command_start_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback_query.message.answer("–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ")
        
        await state.set_state(AddTrackState.username)
        await state.update_data({"user" : str(callback_query.message.chat.id)})
        
    except Exception as e:
        print(e)
    
@add_tracking_router.message(AddTrackState.username)
async def create_transaction_amount_handler(message: Message, state: FSMContext) -> None:
    try:
        await state.update_data({"track_id" : message.text})
        
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∞—Ä–∏—Ñ: ", reply_markup=plans_keyboard(message.chat.id))
        
        await state.set_state(AddTrackState.plan)
        
    except Exception as e:
        print(e)
    
@add_tracking_router.callback_query(AddTrackState.plan)
async def create_transaction_currency_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    try: 
        prefix, plan = callback_query.data.split(":")
        await state.update_data({"plan": plan})
        
        await callback_query.message.answer("–ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        data = await state.get_data()
        request = create_actions(data)
        result = request.get("result")
        
        if not result:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return

        if result.get("payment"):
            payment = result.get("payment")
            amount = payment.get("amount", 1)
            payload = f"{payment.get('id')}_stars"

            kb = InlineKeyboardBuilder()
            kb.button(
                text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏ ‚≠êÔ∏è", 
                pay=True
            )
            kb.button(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="donate_cancel"
            )
            
            kb.adjust(1)
            
            prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏", amount=amount)]

            await callback_query.message.answer_invoice(
                title="–û–ø–ª–∞—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
                description=f"–û–ø–ª–∞—Ç–∞ –ø–ª–∞–Ω–∞ {plan}",
                payload=payload,
                provider_token="",
                currency="XTR",
                prices=prices,
                reply_markup=kb.as_markup()
            )
        else:
            await state.clear()
            await callback_query.message.answer("–í–∞—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

@add_tracking_router.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
        await query.answer(ok=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@add_tracking_router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext):
    try:
        successful_payment = message.successful_payment
        payload = successful_payment.invoice_payload
        charge_id = successful_payment.telegram_payment_charge_id

        id, sufix = payload.split("_") 

        request = success_payment(id)
        
        if not request.get("status"):
            await message.answer("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè")
        
        await message.answer(
            f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
            f"üÜî <b>–ê–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{id}</code>\n"
            f"üí≥ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{charge_id}</code>\n\n"
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É! –ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
            
            reply_markup=start_keyboard(message.chat.id),
        )
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")